# This file is auto-generated by rspec-openapi https://github.com/k0kubun/rspec-openapi
#
# When you write a spec in spec/requests, running the spec with `OPENAPI=1 rspec` will
# update this file automatically. You can also manually edit this file.
---
openapi: 3.0.3
info:
  title: rspec-openapi
  version: 1.0.0
  description: My beautiful API
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
- url: http://localhost:3000
paths:
  "/pages":
    get:
      summary: get
      tags:
      - Page
      responses:
        '200':
          description: return HTML
          content:
            "text/html":
              schema:
                type: string
              example: '<!DOCTYPE html><html lang="en"><head><title>Hello</title></head><body>Hello</body></html>'
#        '204':
#          description: return no content
  "/tables":
    get:
      summary: index
      tags:
      - Table
      parameters:
      - name: X-Authorization-Token
        in: header
        required: true
        schema:
          type: string
        example: token
      - name: page
        in: query
        required: false
        schema:
          type: integer
        example: 42
      - name: per
        in: query
        required: false
        schema:
          type: integer
        example: 10
      - name: show_columns
        in: query
        required: true
        schema:
          type: string
        example: "true"
      responses:
        '200':
          description: with flat query parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Table"
              example:
              - id: 42
                name: access
                description: logs
                database:
                  id: 4242
                  name: production
                null_sample:
                storage_size: 12.3
                created_at: '2020-07-17T00:00:00+00:00'
                updated_at: '2020-07-17T00:00:00+00:00'
                columns:
                  - name: id
                    column_type: integer
                  - name: description
                    column_type: varchar
          headers:
            X-Cursor:
              schema:
                type: integer
        '401':
          description: does not return tables if unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
              example:
                message: Unauthorized
      operationId: table-index
  "/tables/{id}":
    get:
      summary: show
      tags:
      - Table
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        example: 1
      responses:
        '200':
          description: returns a table with changes !!!
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  database:
                    discriminator:
                      propertyName: name
                    oneOf:
                    - type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                          host:
                            type: string
                          port:
                            type: integer
                          user:
                            type: string
                          schema:
                            type: string
                    - type: object
                      properties:
                        host:
                          type: string
                        port:
                          type: integer
                        user:
                          type: string
                        schema:
                          type: string
                      required:
                        - host
                        - port
                        - schema
                    - type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                      required:
                        - id
                        - name
                  null_sample:
                    nullable: true
                  storage_size:
                    type: number
                    format: float
                  created_at:
                    type: string
                  updated_at:
                    type: string
                required:
                  - id
                  - name
                  - description
                  - database
                  - null_sample
                  - storage_size
                  - created_at
                  - updated_at
              example:
                id: 1
                name: access
                description: logs
                database:
                  id: 2
                  name: production
                null_sample:
                storage_size: 12.3
                created_at: '2020-07-17T00:00:00+00:00'
                updated_at: '2020-07-17T00:00:00+00:00'
  "/users":
    post:
      summary: create
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - "$ref": "#/components/schemas/PostUsersRequest"
              - type: string
            example:
              name: alice
              avatar_url: "https://example.com/avatar.png"
              foo:
                bar:
                  baz: 42
      responses:
        '201':
          description: returns an user
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
              example:
                name: alice
                relations:
                  avatar:
                    url: "https://example.com/avatar.png"
                  pets: []
  "/users/{id}":
    get:
      responses:
        "200":
          description: "returns a user whose fields may be missing"
          content:
            "application/json":
              schema:
                "$ref": "#/components/schemas/User"
              example:
                name: John Doe
                relations:
                  avatar:
                    url: "https://example.com/avatar.jpg"
                  pets:
                    - name: doge
                      age: 8
      summary: show
      tags:
      - User
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        example: 2
  "/users/{user_id}/active":
    get:
      responses:
        "200":
          description: "returns a boolean"
          content:
            "application/json":
              schema:
                type: boolean
              example: true
      summary: active
      tags:
        - User
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
          example: 1
components:
  securitySchemes:
    Scheme1:
      description: Authentication scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Table:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        database:
          "$ref": "#/components/schemas/Database"
        columns:
          type: array
          items:
            "$ref": "#/components/schemas/Column"
        null_sample:
          nullable: true
        storage_size:
          type: number
          format: float
        created_at:
          type: string
        updated_at:
          type: string
      required:
        - id
        - name
        - description
        - database
        - columns
        - null_sample
        - storage_size
        - created_at
        - updated_at
    Database:
      type: object
      description: 'this should be preserved'
      properties:
        id:
          type: integer
          description: 'this should be preserved'
        name:
          type: string
      required:
        - id
        - name
    Column:
      type: object
      properties:
        name:
          type: string
        column_type:
          type: string
      required:
        - name
        - column_type
    User:
      discriminator:
        propertyName: name
      oneOf:
      - type: object
        properties:
          name:
            type: string
          foo:
            type: string
          bar:
            type: string
          baz:
            type: string
          quux:
            type: string
      - type: object
        properties:
          name:
            type: string
          relations:
            type: object
            properties:
              avatar:
                "$ref": "#/components/schemas/Avatar"
              pets:
                type: array
                items:
                  "$ref": "#/components/schemas/Pet"
            required:
              - avatar
              - pets
    Avatar:
      type: object
      properties:
        url:
          type: string
      required:
        - url
    Pet:
      type: object
      properties:
        name:
          type: string
        age:
          type: integer
      required:
        - name
        - age
    PostUsersRequest:
      type: object
      properties:
        name:
          type: string
        avatar_url:
          type: string
        foo:
          type: object
          properties:
            bar:
              type: object
              properties:
                baz:
                  type: integer
              required:
                - baz
          required:
            - bar
      required:
        - name
